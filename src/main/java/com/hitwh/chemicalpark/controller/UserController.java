package com.hitwh.chemicalpark.controller;import cn.hutool.core.collection.CollUtil;import cn.hutool.core.util.StrUtil;import cn.hutool.poi.excel.ExcelReader;import cn.hutool.poi.excel.ExcelUtil;import cn.hutool.poi.excel.ExcelWriter;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.core.metadata.IPage;import com.baomidou.mybatisplus.extension.plugins.pagination.Page;import com.hitwh.chemicalpark.common.Constants;import com.hitwh.chemicalpark.common.Result;import com.hitwh.chemicalpark.controller.dto.UserDTO;import com.hitwh.chemicalpark.entity.User;import com.hitwh.chemicalpark.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletResponse;import java.io.InputStream;import java.net.URLEncoder;import java.util.List;@RestController@RequestMapping("/user")public class UserController {    @Autowired    private UserService userService;    //新增和修改    @PostMapping    public Result save(@RequestBody User user){        return Result.success(userService.saveUser(user));    }    //新增和修改    @PostMapping("/login")    public Result login(@RequestBody UserDTO userDTO){        String username = userDTO.getUsername();        String password = userDTO.getPassword();        //同时校验不是Null且不等于0        if(StrUtil.isBlank(username) || StrUtil.isBlank(password)){            return Result.error(Constants.CODE_400,"参数错误");        }else{            UserDTO dto = userService.login(userDTO);            return Result.success(dto);        }    }    @PostMapping("/register")    public Result register(@RequestBody UserDTO userDTO){        String username = userDTO.getUsername();        String password = userDTO.getPassword();        //同时校验不是Null且不等于0        if(StrUtil.isBlank(username) || StrUtil.isBlank(password)) {            return Result.error(Constants.CODE_400, "参数错误");        }else{            return Result.success(userService.register(userDTO));        }    }    //查询    @GetMapping    public Result findAll(){        return Result.success(userService.list());    }    @GetMapping("/username/{username}")    public Result findOne(@PathVariable String username){        QueryWrapper<User> queryWrapper = new QueryWrapper<>();        queryWrapper.eq("username",username);        return Result.success(userService.getOne(queryWrapper));    }    //删除    @DeleteMapping("/{id}")  /*花括号里的id与下面的对应,与下面第二行的第一个id对应*/    public Result delete(@PathVariable Integer id){        return Result.success(userService.removeById(id));    }    @PostMapping("/del/batch")    public Result deleteBatch(@RequestBody List<Integer> ids){        return Result.success(userService.removeBatchByIds(ids));    }    //分页查询 - MybatisPlus    @GetMapping("/page")    public Result findPage(@RequestParam Integer pageNum,                                @RequestParam Integer pageSize,                                @RequestParam(defaultValue = "") String username,                                @RequestParam(defaultValue = "") String nickname)    {        IPage<User> page = new Page<>(pageNum, pageSize);        QueryWrapper<User> queryWrapper = new QueryWrapper<>();        if(!"".equals(username)){            queryWrapper.like("username", username);        }        if(!"".equals(nickname)){            queryWrapper.like("nickname", nickname);        }        queryWrapper.orderByAsc("id");        return Result.success(userService.page(page, queryWrapper));    }    /**     * excel 导入     * @param file     * @throws Exception     */    @PostMapping("/import")    public Result imp(MultipartFile file) throws Exception {        InputStream inputStream = file.getInputStream();        ExcelReader reader = ExcelUtil.getReader(inputStream);        // 方式1：(推荐) 通过 javabean的方式读取Excel内的对象，但是要求表头必须是英文，跟javabean的属性要对应起来//         List<User> list = reader.readAll(User.class);        // 方式2：忽略表头的中文，直接读取表的内容        List<List<Object>> list = reader.read(1); //忽略第一行        List<User> users = CollUtil.newArrayList();        for (List<Object> row : list) {            User user = new User();            user.setUsername(row.get(0).toString());            user.setPassword(row.get(1).toString());            user.setNickname(row.get(2).toString());            users.add(user);        }        userService.saveBatch(users);        return Result.success(true);    }    /**     * 导出接口     */    @GetMapping("/export")    public Result export(HttpServletResponse response) throws Exception {        // 从数据库查询出所有的数据        List<User> list = userService.list();        // 通过工具类创建writer 写出到磁盘路径//        ExcelWriter writer = ExcelUtil.getWriter("D:" + "/用户信息.xlsx");        // 在内存操作，写出到浏览器        ExcelWriter writer = ExcelUtil.getWriter(true);        //自定义标题别名        writer.addHeaderAlias("username", "用户名");        writer.addHeaderAlias("password", "密码");        writer.addHeaderAlias("nickname", "昵称");        // 一次性写出list内的对象到excel，使用默认样式，强制输出标题        writer.write(list, true);        // 设置浏览器响应的格式        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8");        String fileName = URLEncoder.encode("用户信息", "UTF-8");        response.setHeader("Content-Disposition", "attachment;filename=" + fileName + ".xlsx");        ServletOutputStream out = response.getOutputStream();        writer.flush(out, true);        out.close();        writer.close();        return Result.success(true);    }}